dependencies {
  api(project(":keel-api"))
  api(project(":keel-ec2-api"))
  implementation(project(":keel-core")) // TODO: ideally not
  api(project(":keel-optics"))
  implementation(project(":keel-clouddriver"))
  implementation(project(":keel-orca"))
  implementation(project(":keel-retrofit"))
  implementation(project(":keel-artifact"))
  implementation(project(":keel-igor"))
  implementation("com.netflix.spinnaker.kork.internal:kork-core")
  implementation("com.netflix.spinnaker.kork.internal:kork-web")
  implementation("org.springframework:spring-context")
  implementation("org.springframework.boot:spring-boot-autoconfigure")
  implementation("com.netflix.frigga:frigga")
  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:$kotlinCoroutinesVersion")
  implementation("io.swagger.core.v3:swagger-annotations:2.1.2")
  implementation("com.netflix.buoy:buoy-client:0.7.0")

  testImplementation(project(":keel-test"))
  testImplementation(project(":keel-retrofit-test-support"))
  testImplementation(project(":keel-spring-test-support"))
  testImplementation("com.netflix.spinnaker.kork.internal:kork-plugins")
  testImplementation("io.strikt:strikt-jackson")
  testImplementation("io.strikt:strikt-jvm")
  testImplementation("dev.minutest:minutest")
  testImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")
  testImplementation("org.apache.commons:commons-lang3")

  // the following are needed to use keel's real(-ish) Spring configuration
  testImplementation(project(":keel-web")) {
    // avoid circular dependency
    exclude(module: "keel-ec2-plugin")
  }
  testImplementation(project(":keel-testcontainers"))
  testImplementation(project(":keel-sql"))
}

test {
  if (mySqlMode == "local") {
    dependsOn(":recreateLocalDatabase")
    environment("SPRING_PROFILES_ACTIVE", "localmysql")
  }
}
