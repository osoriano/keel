plugins {
  id "application"
  id "com.github.hauner.jarTest" version "1.0.1"
}

apply plugin: "com.github.hauner.jarTest"

repositories {
  mavenCentral() // for graphql-java-extended-scalars
}

dependencies {
  api(project(":keel-core"))
  api(project(":keel-clouddriver"))
  api(project(":keel-artifact"))
  api(project(":keel-sql"))
  api(project(":keel-docker"))
  api(project(":keel-echo"))
  api(project(":keel-igor"))
  api(project(":keel-lemur"))
  api(project(":keel-notifications"))
  api(project(":keel-front50"))
  api(project(":keel-orca"))
  api(project(":keel-jira"))
  api(project(":keel-stash"))

  implementation(project(":keel-bakery-plugin"))
  implementation(project(":keel-ec2-plugin"))
  implementation(project(":keel-titus-plugin"))
  implementation(project(":keel-schema-generator"))
  implementation(project(":keel-scm"))
  implementation(project(":keel-retrofit"))
  implementation(project(":keel-graphql-schema"))
  implementation(project(":keel-buoy"))
  implementation(project(":keel-verifications"))
  implementation(project(":keel-jenkins"))

  implementation("com.netflix.spinnaker.kork.internal:kork-web")
  implementation("com.netflix.spinnaker.kork.internal:kork-artifacts")
  implementation("com.netflix.spinnaker.kork.internal:kork-encryption")
  implementation("org.springframework.boot:spring-boot-starter-actuator")
  implementation("org.springframework.boot:spring-boot-starter-web")
  implementation("org.springframework.security:spring-security-config")
  implementation("com.netflix.spinnaker.fiat.internal:fiat-api")
  implementation("com.netflix.spinnaker.fiat.internal:fiat-core")
  implementation("io.swagger.core.v3:swagger-annotations:2.1.2")
  implementation("org.apache.maven:maven-artifact:3.6.3")
  implementation("com.netflix.spinnaker.kork.internal:kork-plugins")
  //implementation("com.slack.api:bolt-servlet:${slackSdkVersion}")
  implementation("com.slack.api:bolt-socket-mode:${slackSdkVersion}")
  implementation("javax.websocket:javax.websocket-api:1.1")
  implementation("org.glassfish.tyrus.bundles:tyrus-standalone-client:1.17")
  implementation("com.netflix.spinnaker.netflixplatform:netflixplatform-security")

  // DGS dependencies
  implementation(platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${dgsVersion}"))
  implementation("com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter")
  implementation("com.fasterxml.jackson.datatype:jackson-datatype-joda")
  implementation("com.graphql-java:graphql-java-extended-scalars:16.0.1")

  runtimeOnly("com.netflix.spinnaker.kork.internal:kork-runtime")

  testImplementation(project(":keel-test"))
  testImplementation(project(":keel-core-test"))
  testImplementation(project(":keel-spring-test-support"))
  testImplementation(project(":keel-retrofit"))
  testImplementation(project(":keel-clouddriver"))
  testImplementation("io.strikt:strikt-jackson")
  testImplementation("com.fasterxml.jackson.module:jackson-module-kotlin")
  testImplementation("com.squareup.okhttp3:mockwebserver")
  testImplementation(project(":keel-testcontainers"))
  testImplementation("com.networknt:json-schema-validator:1.0.43")
  testImplementation("com.netflix.spinnaker.kork.internal:kork-plugins")
  testImplementation("com.graphql-java:graphql-java-extended-scalars:16.0.0")

  testRuntimeOnly(project(":keel-ec2-plugin"))
}

application {
  mainClassName = "com.netflix.spinnaker.keel.MainKt"
  applicationName("keel")
}

test {
  if (mySqlMode == "local") {
    dependsOn(":recreateLocalDatabase")
    environment("SPRING_PROFILES_ACTIVE", "localmysql")
  }
}
